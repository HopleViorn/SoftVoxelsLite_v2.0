#
#   SETTINGS
#

profile.Performance=PT_SPP=1 !SSPT_Enabled FogMode=1 !godraysEnabled SVGF_RAD=1 !LPV_MULTIPASS_PROPAGATION !CLOUD_PLANE0_ENABLED
profile.Default=profile.Performance SSPT_Enabled godraysEnabled CLOUD_PLANE0_ENABLED
profile.Quality=profile.Default PT_SPP=1 SVGF_RAD=2

screen=INFO <profile> <empty> [ATMOS] [LIGHT] [TERRAIN] [CAMERA] [POST] [MISC]
screen.columns=1

screen.ATMOS=sunPathRotation volumeWorldTimeAnim <empty> [CLOUDS] [FOG] [WATER]
screen.ATMOS.columns=1

    screen.CLOUDS=CLOUD_PLANE0_ENABLED CLOUD_PLANE0_DEPTH CLOUD_PLANE0_COVERAGE <empty> CLOUD_PLANE1_ENABLED CLOUD_PLANE1_DEPTH CLOUD_PLANE1_COVERAGE <empty> CLOUD_SHEET_ENABLED CLOUD_SHEET_DEPTH CLOUD_SHEET_COVERAGE

    screen.FOG=FogMode FogDensity <empty> <empty> godraysEnabled godraySamples godraySize

    screen.WATER=customWaterColor waterFogEnabled customWaterNormals waterParallaxEnabled <empty> <empty> waterRed waterGreen waterBlue waterAlpha waterTextureBlend waterDensity <empty> <empty> waterCoeffRed waterCoeffGreen waterCoeffBlue waterCoeffScatter

screen.LIGHT=[COLORS] [DIRECTLIGHT] [INDIRECTLIGHT] [LPVX]
screen.LIGHT.columns=1

    screen.COLORS=sunlightIllum moonlightIllum sunlightRedMult moonlightRedMult sunlightGreenMult moonlightGreenMult sunlightBlueMult moonlightBlueMult <empty> <empty> skylightIllum blocklightIllum skylightRedMult blocklightBaseTemp skylightGreenMult <empty> skylightBlueMult minimumAmbientIllum

    screen.DIRECTLIGHT=PT_SHARP_DIRECT PT_SHARP_DIRECT_Angle

    screen.INDIRECTLIGHT=indirectResReduction PT_SPP [ACCUM] [FILTER] <empty> <empty> SSPT_Enabled ConretePowderEmission labEmissionMode labEmissionCurve textureAoEnabled
        screen.ACCUM=maxFrames minAccumMult ADAPT_STRENGTH
        screen.ACCUM.columns=1
        screen.FILTER=SVGF_FILTER <empty> SVGF_RAD SVGF_STRICTNESS SVGF_NORMALEXP <empty> SVGF_PREACCUM
        screen.FILTER.columns=1

    screen.LPVX=shadowMapResolution VX_MAX_WIDTH VX_MAX_DEPTH VOXEL_COLOR_SAMPLES
    screen.LPVX.columns=1

screen.TERRAIN=normalmapEnabled normalmapFormat vertexAttributeFix refractionEnabled <empty> <empty> wetnessMode puddleRippleSpeed <empty> <empty> windEffectsEnabled windIntensity <empty> <empty> [PARALLAX] [REFLECTIONS]
screen.TERRAIN.columns=2

    screen.PARALLAX=pomEnabled pomSamples pomShadowSamples pomDepth <empty> slopeNormalCalculation
    screen.PARALLAX.columns=1

    screen.REFLECTIONS=screenspaceReflectionsEnabled <empty> RoughReflections RoughReflectionSamples ReflectionRoughnessCutoff
    screen.REFLECTIONS.columns=1

screen.CAMERA=camSensorWidth camFStops anamorphStretch [BLOOM] [DOF] [EXP] [FLARE] [MBLUR] [VIGNETTE]
screen.CAMERA.columns=1

    screen.BLOOM=bloomEnabled bloomIntensity
    screen.BLOOM.columns=1

    screen.DOF=DoFToggle DoFQuality DoFChromaDispersion chromaOffsetScale <empty> camFocus camManFocDis showFocusPlane
    screen.DOF.columns=1

    screen.EXP=LOCAL_EXPOSURE exposureComplexEnabled <empty> <empty> exposureDecay exposureBias exposureDarkClamp exposureBrightClamp exposureBrightPercentage exposureDarkPercentage exposureBrightWeight exposureDarkWeight exposureAverageWeight <empty> <empty> <empty> manualExposureEnabled manualExposureValue
    screen.EXP.columns=2

    screen.FLARE=lensFlareToggle lensFlareHaloToggle lensFlareIntensity lensFlareThreshold <empty> <empty> lensFlareGhostCount lensFlareGhostSpace lensFlareHaloRad lensFlareHaloDepth

    screen.MBLUR=motionblurToggle <empty> motionblurSamples motionblurScale
    screen.MBLUR.columns=1

    screen.VIGNETTE=vignetteEnabled <empty> vignetteStart vignetteEnd vignetteIntensity vignetteExponent
    screen.VIGNETTE.columns=1

screen.POST=CAS_Strength ResolutionScale <empty> <empty> tonemapOperator VIEWPORT_GAMUT screenBitdepth <empty> <empty> <empty> [ACES] [AA] [CGRADE] [PURKINJE] [FTOOL]
screen.POST.columns=2

    screen.ACES=acesRRTExposureBias acesRRTGammaLift acesRRTGlowGainOffset acesRRTSatOffset acesODTSatOffset
    screen.ACES.columns=1

    screen.AA=RESAMPLING_PARAM <empty> taaAntiFlicker taaLumaRejection TAA_AGGRESSIVE_ANTIFLICKER
    screen.AA.columns=1

    screen.CGRADE=doColorgrading <empty> <empty> <empty> vibranceInt saturationInt gammaCurve brightnessInt constrastInt <empty> colorlumR colorlumG colorlumB

    screen.PURKINJE=PURKINJE_EFFECT <empty> purkinjeExponent purkinjeTintRed purkinjeTintGreen purkinjeTintBlue
    screen.PURKINJE.columns=1

    screen.FTOOL=framingToolEnabled framingThirdsHor framingToAspect framingAspectX framingAspectY framingToAspectCenter
    screen.FTOOL.columns=1


screen.MISC=[INTERNAL] DEBUG_VIEW <empty> <empty> freezeAtmosAnim atmosAnimOffset LOCAL_EXPOSURE_DEMO

    screen.INTERNAL=*

sliders= sunPathRotation CLOUD_PLANE0_DEPTH CLOUD_PLANE0_COVERAGE CLOUD_PLANE1_DEPTH CLOUD_PLANE1_COVERAGE CLOUD_SHEET_DEPTH CLOUD_SHEET_COVERAGE \
 FogDensity godraySamples godraySize fogMinSteps fogAdaptiveSteps \
 waterRed waterGreen waterBlue waterAlpha waterTextureBlend waterDensity waterCoeffRed waterCoeffGreen waterCoeffBlue waterCoeffScatter \
 SVGF_STRICTNESS SVGF_NORMALEXP maxFrames minAccumMult ADAPT_STRENGTH PT_SHARP_DIRECT_Angle \
 shadowMapResolution vpsSize shadowFilterIterations indirectResReduction PT_SPP ssptBounces ssptLightmapBlend ssptEmissionDistance labEmissionCurve \
 sunlightIllum moonlightIllum sunlightRedMult moonlightRedMult sunlightGreenMult moonlightGreenMult sunlightBlueMult moonlightBlueMult skylightIllum blocklightIllum \
 skylightRedMult blocklightBaseTemp skylightGreenMult skylightBlueMult minimumAmbientIllum VX_MAX_WIDTH VX_MAX_DEPTH VOXEL_COLOR_SAMPLES SPF_LOBE SPF_SHARPEN SPF_KERNEL_MINW SPF_KERNEL_MAXW \
 windIntensity puddleRippleSpeed pomSamples pomShadowSamples pomDepth roughReflectionSamples roughnessThreshold skyOcclusionThreshold RoughReflectionSamples ReflectionRoughnessCutoff \
 camSensorWidth camFStops anamorphStretch bloomIntensity DoFQuality chromaOffsetScale camManFocDis \
 exposureDecay exposureBias manualExposureValue exposureDarkClamp exposureBrightClamp exposureBrightPercentage exposureDarkPercentage exposureBrightWeight exposureDarkWeight \
 lensFlareIntensity lensFlareThreshold lensFlareGhostCount lensFlareGhostSpace lensFlareHaloRad lensFlareHaloDepth \
 motionblurSamples motionblurScale vignetteStart vignetteEnd vignetteIntensity vignetteExponent \
 acesRRTExposureBias acesRRTGammaLift acesRRTGlowGainOffset acesRRTSatOffset acesODTSatOffset \
 taaBlendWeight taaMotionRejection taaAntiGhosting taaAntiFlicker taaLumaRejection taaHueRejection \
 vibranceInt saturationInt gammaCurve brightnessInt constrastInt colorlumR colorlumG colorlumB \
 framingAspectX framingAspectY framingToAspectCenter CAS_Strength \
 atmosAnimOffset planetRadiusScale purkinjeExponent purkinjeTintRed purkinjeTintGreen purkinjeTintBlue

version.1.16.5=G8
version.1.16.4=G8

oldLighting=false
oldHandLight=false
vignette=false
separateAo=true
underwaterOverlay=false
sun=false
moon=true
fog=off
rain.depth=false
clouds=off
dynamicHandLight=false
supportsColorCorrection=true

blend.gbuffers_basic=off
blend.gbuffers_block=off
blend.gbuffers_terrain=off
blend.gbuffers_entities=off
blend.gbuffers_hand=off
blend.gbuffers_spidereyes=SRC_ALPHA ONE ZERO ONE
blend.gbuffers_armor_glint=SRC_ALPHA ONE ZERO ONE
blend.gbuffers_textured=off
blend.gbuffers_skybasic=off
blend.gbuffers_skytextured=SRC_ALPHA ONE ZERO ONE
blend.gbuffers_textured_lit=off
blend.gbuffers_clouds=off
blend.deferred=off
blend.prepare=off
blend.shadow=off
blend.shadowcomp=off

alphaTest.shadow=off

blend.gbuffers_water.colortex1=off
blend.gbuffers_water.colortex2=off
blend.gbuffers_water.colortex3=off

blend.gbuffers_hand_water.colortex1=off
blend.gbuffers_hand_water.colortex2=off
blend.gbuffers_hand_water.colortex3=off

size.buffer.colortex4=256 384

texture.noise=image/noise2D.png

#texture.shadowcomp.colortex5=minecraft:textures/atlas/blocks.png

texture.composite.depthtex2=image/bluenoiseUV8.dat TEXTURE_3D RGB8 256 256 8 RGB UNSIGNED_BYTE

program.skyboxPrep.texture.noisetex=noise
program.skyboxPrep.uniform.sunVec=sunDir

program.world0/deferred5.enabled=SVGF_FILTER
program.world0/deferred6.enabled=SVGF_FILTER
program.world0/deferred7.enabled=SVGF_FILTER
program.world0/deferred8.enabled=SVGF_FILTER
program.world0/deferred9.enabled=SVGF_FILTER

program.world-1/deferred5.enabled=SVGF_FILTER
program.world-1/deferred6.enabled=SVGF_FILTER
program.world-1/deferred7.enabled=SVGF_FILTER
program.world-1/deferred8.enabled=SVGF_FILTER
program.world-1/deferred9.enabled=SVGF_FILTER


variable.int.fmod8 = frameCounter % 8
#uniform.vec2.taaOffset = vec2((if( \
#    fmod8 == 0,  0.125, \
#    fmod8 == 1, -0.125, \
#    fmod8 == 2,  0.625, \
#    fmod8 == 3,  0.375, \
#    fmod8 == 4, -0.625, \
#    fmod8 == 5, -0.875, \
#    fmod8 == 6,  0.375, \
#    fmod8 == 7,  0.875, \
#    0.0)) / viewWidth, \
#    (if( \
#    fmod8 == 0, -0.375, \
#    fmod8 == 1,  0.375, \
#    fmod8 == 2,  0.125, \
#    fmod8 == 3, -0.625, \
#    fmod8 == 4,  0.625, \
#    fmod8 == 5, -0.125, \
#    fmod8 == 6, -0.875, \
#    fmod8 == 7,  0.875, \
#    0.0)) / viewHeight)


#
#   TAA Offsets by Zombye
#

uniform.float.frameR1 = frac(0.5 + frameCounter / 1.61803398874989484820458683436563)
variable.float.frameR2X = frac(0.5 + frameCounter / 1.32471795724474602596090885447809)
variable.float.frameR2Y = frac(0.5 + frameCounter / (1.32471795724474602596090885447809 * 1.32471795724474602596090885447809))
uniform.vec2.frameR2 = vec2(frameR2X, frameR2Y)

# TAA offset
uniform.vec2.taaOffset = vec2((frameR2X * 2.0 - 1.0) / viewWidth, (frameR2Y * 2.0 - 1.0) / viewHeight)



uniform.float.worldAnimTime = worldDay % 48 + worldTime / 24000.0

uniform.int.frame255Last=frameCounter % 255
uniform.int.frame255=(frameCounter + 1) % 255

#       RESOLUTION UNIFORMS
uniform.vec2.viewSize = vec2(viewWidth, viewHeight)
uniform.vec2.pixelSize = vec2(1.0 / viewWidth, 1.0 / viewHeight)

variable.float.bloomYres    = min(1080.0, viewHeight)
variable.float.bloomXres    = bloomYres * aspectRatio
uniform.vec2.bloomResolution = vec2(bloomXres, bloomYres)


#       DIRECTIONS
variable.float.upDirNorm    = 1.0 / sqrt((upPosition.x*upPosition.x) + (upPosition.y*upPosition.y) + (upPosition.z*upPosition.z))
uniform.vec3.upDirView      = vec3(upPosition.x*upDirNorm, upPosition.y*upDirNorm, upPosition.z*upDirNorm)
uniform.vec3.upDir          = vec3(0.0, 1.0, 0.0)

variable.float.sunDirNorm   = 1.0 / sqrt((sunPosition.x * sunPosition.x) + (sunPosition.y * sunPosition.y) + (sunPosition.z * sunPosition.z))
variable.float.svecX        = sunPosition.x * sunDirNorm
variable.float.svecY        = sunPosition.y * sunDirNorm
variable.float.svecZ        = sunPosition.z * sunDirNorm
uniform.vec3.sunDirView     = vec3(svecX, svecY, svecZ)
variable.float.sunDirX      = gbufferModelViewInverse.0.0 * sunPosition.x + gbufferModelViewInverse.1.0 * sunPosition.y + gbufferModelViewInverse.2.0 * sunPosition.z
variable.float.sunDirY      = gbufferModelViewInverse.0.1 * sunPosition.x + gbufferModelViewInverse.1.1 * sunPosition.y + gbufferModelViewInverse.2.1 * sunPosition.z
variable.float.sunDirZ      = gbufferModelViewInverse.0.2 * sunPosition.x + gbufferModelViewInverse.1.2 * sunPosition.y + gbufferModelViewInverse.2.2 * sunPosition.z
uniform.vec3.sunDir         = vec3(sunDirX * sunDirNorm, sunDirY * sunDirNorm, sunDirZ * sunDirNorm)

variable.float.moonDirNorm  = 1.0 / sqrt((moonPosition.x * moonPosition.x) + (moonPosition.y * moonPosition.y) + (moonPosition.z * moonPosition.z))
variable.float.mvecX        = moonPosition.x * moonDirNorm
variable.float.mvecY        = moonPosition.y * moonDirNorm
variable.float.mvecZ        = moonPosition.z * moonDirNorm
uniform.vec3.moonDirView    = vec3(mvecX, mvecY, mvecZ)
variable.float.moonDirX     = gbufferModelViewInverse.0.0 * moonPosition.x + gbufferModelViewInverse.1.0 * moonPosition.y + gbufferModelViewInverse.2.0 * moonPosition.z
variable.float.moonDirY     = gbufferModelViewInverse.0.1 * moonPosition.x + gbufferModelViewInverse.1.1 * moonPosition.y + gbufferModelViewInverse.2.1 * moonPosition.z
variable.float.moonDirZ     = gbufferModelViewInverse.0.2 * moonPosition.x + gbufferModelViewInverse.1.2 * moonPosition.y + gbufferModelViewInverse.2.2 * moonPosition.z
uniform.vec3.moonDir        = vec3(moonDirX * moonDirNorm, moonDirY * moonDirNorm, moonDirZ * moonDirNorm)



variable.float.shadowmapLightDirX = shadowModelViewInverse.2.0 * 1.0
variable.float.shadowmapLightDirY = shadowModelViewInverse.2.1 * 1.0
variable.float.shadowmapLightDirZ = shadowModelViewInverse.2.2 * 1.0
uniform.vec3.lightDir = vec3(shadowmapLightDirX, shadowmapLightDirY, shadowmapLightDirZ)
variable.float.shadowmapLightDirViewX = gbufferModelView.0.0 * shadowmapLightDirX + gbufferModelView.1.0 * shadowmapLightDirY + gbufferModelView.2.0 * shadowmapLightDirZ
variable.float.shadowmapLightDirViewY = gbufferModelView.0.1 * shadowmapLightDirX + gbufferModelView.1.1 * shadowmapLightDirY + gbufferModelView.2.1 * shadowmapLightDirZ
variable.float.shadowmapLightDirViewZ = gbufferModelView.0.2 * shadowmapLightDirX + gbufferModelView.1.2 * shadowmapLightDirY + gbufferModelView.2.2 * shadowmapLightDirZ
uniform.vec3.lightDirView = vec3(shadowmapLightDirViewX, shadowmapLightDirViewY, shadowmapLightDirViewZ)

variable.float.timeSunrise  = ((clamp(sunAngle, 0.97, 1.00) - 0.97) / 0.03) + (1.0 - (clamp(sunAngle, 0.01, 0.10) - 0.01) / 0.09)
variable.float.timeNoon_0   = ((clamp(sunAngle, 0.01, 0.10) - 0.01) / 0.09) - ((clamp(sunAngle, 0.40, 0.49) - 0.40) / 0.09)
variable.float.timeSunset   = ((clamp(sunAngle, 0.40, 0.49) - 0.40) / 0.09) - ((clamp(sunAngle, 0.50, 0.53) - 0.50) / 0.03)
variable.float.timeNight    = ((clamp(sunAngle, 0.50, 0.53) - 0.50) / 0.03) - ((clamp(sunAngle, 0.97, 1.00) - 0.97) / 0.03)
uniform.vec4.daytime        = vec4(timeSunrise, timeNoon_0, timeSunset, timeNight)

variable.float.smoothWorldTime = smooth(sunDirZ, frameTime*8.0, frameTime*8.0)
uniform.int.WorldTimeChange = if(abs(smoothWorldTime - sunDirZ) > 0.9, 1, 0)

variable.float.sunY         = sunDirY * sunDirNorm
variable.float.lf1          = (1.0 - ((clamp(-sunY, 0.002, 0.04) - 0.002) / 0.038)) * (1.0 - ((clamp(sunY, 0.002, 0.04) - 0.002) / 0.038))
uniform.float.lightFlip     = clamp(1.0 - lf1, 0.0, 1.0)

variable.bool.isCloudSunlit     = (worldTime>23000 || worldTime<12900)
uniform.vec3.cloudLightDir      = vec3(if(isCloudSunlit, sunDirX, moonDirX)*sunDirNorm, if(isCloudSunlit, sunDirY, moonDirY)*sunDirNorm, if(isCloudSunlit, sunDirZ, moonDirZ)*sunDirNorm)
uniform.vec3.cloudLightDirView  = vec3(if(isCloudSunlit, svecX, mvecX), if(isCloudSunlit, svecY, mvecY), if(isCloudSunlit, svecZ, mvecZ))
variable.float.cloudBackscatterInt = ((clamp(worldTime, 12550.0, 12800.0) - 12550.0) / 250.0) - ((clamp(worldTime, 23250.0, 23600.0) - 23250.0) / 350.0)
variable.float.cloudLightFlip1 = ((clamp(worldTime, 22600.0, 22900.0) - 22600.0) / 300.0) - ((clamp(worldTime, 23000.00, 23200.0) - 23000.0) / 200.0)
variable.float.cloudLightFlip2 = ((clamp(worldTime, 12600.0, 12900.0) - 12600.0) / 300.0) - ((clamp(worldTime, 12900.00, 13200.0) - 12900.0) / 300.0)
uniform.float.cloudLightFlip   = clamp(1.0 - (cloudLightFlip1 + cloudLightFlip2), 0.0, 1.0)

#
#           DETAILED TIME DEPENDENT STUFF
#

variable.float.timeMorning      = ((clamp(worldTime, 22600.0, 23600.0) - 22600.0) / 1000.0)  + (1.0-((clamp(worldTime, 200.0, 1000.0) - 200.0) / 800.0))
variable.float.timeForenoon     = ((clamp(worldTime,   200.0,  1000.0) -   200.0) /  800.0)  - ((clamp(worldTime,  3500.0,  5500.0) -  3500.0) / 2000.0)
variable.float.timeNoon         = ((clamp(worldTime,  3500.0,  5500.0) -  3500.0) / 2000.0)  - ((clamp(worldTime,  6500.0,  8500.0) -  6500.0) / 2000.0)
variable.float.timeAfternoon    = ((clamp(worldTime,  6500.0,  8500.0) -  6500.0) / 2000.0)  - ((clamp(worldTime, 11000.0, 11800.0) - 11000.0) /  800.0)
variable.float.timeEvening      = ((clamp(worldTime, 11000.0, 11800.0) - 11000.0) /  800.0)  - ((clamp(worldTime, 13000.0, 13600.0) - 13000.0) /  600.0)
variable.float.timeDusk         = ((clamp(worldTime, 13000.0, 13600.0) - 13000.0) /  600.0)  - ((clamp(worldTime, 17000.0, 19000.0) - 17000.0) / 2000.0)
variable.float.timeDawn         = ((clamp(worldTime, 17000.0, 19000.0) - 17000.0) / 2000.0)  - ((clamp(worldTime, 22600.0, 23600.0) - 22600.0) / 1000.0)

#
#           ATMOSPHERE CONCENTRATION DYNAMICS
#

variable.float.atmosRayleigh   = timeMorning * 0.9 + timeForenoon * 1.0 + timeNoon * 1.08 + timeAfternoon * 1.13 + timeEvening * 1.3 + timeDusk * 1.14 + timeDawn * 1.0 + wetness + rainStrength
variable.float.atmosMie        = timeMorning * 0.75 + timeForenoon * 0.9 + timeNoon * 1.0 + timeAfternoon * 1.1 + timeEvening * 1.35 + timeDusk * 1.15 + timeDawn * 0.9 + wetness * 16.0
variable.float.atmosOzone      = timeMorning * 1.25 + timeForenoon * 0.9 + timeNoon * 1.0 + timeAfternoon * 1.1 + timeEvening * 1.65 + timeDusk * 1.4 + timeDawn * 1.3
uniform.vec3.airDensityCoeff = vec3(atmosRayleigh, atmosMie, atmosOzone)

#
#           FOG DYNAMICS
#

variable.float.fogRayleigh  = 1.0 * timeMorning + 0.8 * timeForenoon + 0.7 * timeNoon + 0.66 * timeAfternoon + 0.59 * timeEvening + 0.36 * timeDusk + 0.45 * timeDawn + wetness
variable.float.fogMie       = 1.00 * timeMorning + 0.72 * timeForenoon + 0.45 * timeNoon + 0.33 * timeAfternoon + 0.30 * timeEvening + 0.32 * timeDusk + 0.65 * timeDawn + wetness * 2.5
variable.float.fogMist      = 1.0 * timeMorning + 0.06 * timeForenoon + timeDawn * 0.35 + wetness * 2.0

uniform.vec3.fogDensityCoeff = vec3(fogRayleigh, fogMie, fogMist)

#
#           CLOUD DYNAMICS
#

variable.float.CloudSheetBias = 0.25 * timeMorning + 0.35 * timeForenoon + 0.4 * timeNoon + 0.15 * timeAfternoon + 0.2 * timeDawn
variable.float.CloudSheetDensity = 0.3 * timeMorning + 0.4 * timeForenoon + 0.3 * timeNoon + 0.5 * timeAfternoon + 1.0 * timeEvening + 0.9 * timeDusk + 0.5 * timeDawn
uniform.vec2.CloudSheetDynamics = vec2(CloudSheetBias, CloudSheetDensity)

variable.float.Cloud0Bias = 0.02 * timeMorning + 0.05 * timeForenoon + 0.0 * timeNoon + 0.04 * timeAfternoon + 0.1 * timeEvening + 0.1 * timeDusk + 0.1 * timeDawn
variable.float.Cloud0Density = 0.85 * timeMorning + 0.9 * timeForenoon + 1.0 * timeNoon + 0.9 * timeAfternoon + 0.8 * timeEvening + 0.7 * timeDusk + 0.6 * timeDawn
uniform.vec2.Cloud0Dynamics = vec2(Cloud0Bias, Cloud0Density)

variable.float.Cloud1Bias = 0.0 * timeMorning + -0.05 * timeForenoon + -0.02 * timeNoon + 0.0 * timeAfternoon + 0.0 * timeEvening + 0.08 * timeDusk + 0.0 * timeDawn
variable.float.Cloud1Density = 0.7 * timeMorning + 0.9 * timeForenoon + 1.0 * timeNoon + 1.0 * timeAfternoon + 0.9 * timeEvening + 0.9 * timeDusk + 0.8 * timeDawn
uniform.vec2.Cloud1Dynamics = vec2(Cloud1Bias, Cloud1Density)